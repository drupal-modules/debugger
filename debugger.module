<?php

/**
 * @file
 *   Drupal debugger analysing the performance issues on the website
 *
 * @version
 *   $Id$
 *
 * @developers
 *   Rafal Wieczorek <kenorb@gmail.com>
 */

require_once 'debugger.api.inc'; // load API functions
declare(ticks = 1);
register_tick_function('debugger_tick');

define('D_MIN_TIMER', 0.01);
define('D_SAVE_COUNTER', 100);

/**
 * Implementation of hook_boot().
 */
function debugger_boot() {
  if (debugger_enabled()) {
    register_shutdown_function('debugger_shutdown'); // hook_exit or shutdown better?
    variable_set('dev_query', 1); // Enable query logging // TODO: convert to configurable setting?
    debugger_check_curr_path();
  }
}

/**
 * Implementation of hook_init().
 */
function debugger_init() {
/* Manually install again
    module_load_include('install', 'debugger');
    debugger_install();
*/
}

/**
 * Implementation of hook_menu().
 */
function debugger_menu() {
  $items['admin/settings/debugger'] = array(
    'title' => 'Debugger',
    'description' => t('Manage Drupal debugger'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('debugger_admin_form'),
    'access arguments' => array('administer debugger'),
    'file' => 'debugger.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function debugger_perm() {
  return array('administer debugger');
}

/**
 * Implementation of hook_views_api().
 */
function debugger_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'debugger') .'/views/includes',
  );
}

/**
 * Implementation of hook_exit().
 */
function debugger_exit() {
  global $debugger_exit;
  $debugger_exit = TRUE; // mark the exit correctly
}

/** 
 * Implementation of register_shutdown_function PHP callback
 *
 */ 
function debugger_shutdown() {
  global $debugger_exit;
  if (!$debugger_exit) { // If hook_exit wasn't executed, check if we are out of memory?
    $ini_size = ini_get("memory_limit");
    $curr_size = memory_get_usage();

    /* format size */
    $units = array('B', 'K', 'M', 'G', 'T');
    for ($i = 0; $curr_size >= 1024 && $i < 4; $i++) $curr_size /= 1024;
    if (round($curr_size).$units[$i] == $ini_size) { // FIXME: FIX for 1G and more
      print 'Fatal Error: Please increase your PHP memory limit in your php.ini!';
      db_query("UPDATE system SET `status` = 0 WHERE name = 'debugger'"); // FIXME: do we have connection enabled on shutdown?
      print 'After that please re-enable the module!';
      exit;
    }
  }
  if (debugger_enabled()) {
    variable_set('dev_query', 0); // TODO: convert to configurable setting?
    debugger_check_curr_path(); // Fix the Apache bug when current directory is changed on shutdown
    module_load_include('inc', 'debugger'); // include additional functions
    debugger_savetrace(); // save backtrace into db
    unregister_tick_function('debugger_tick');
  }
}

/** 
 * Helper function to check if debugger should be enabled on the current page
 */
function debugger_enabled() {
  $path = explode('/', $_GET['q']);
  $res = variable_get('debugger_enabled', FALSE) && (!($path[0] == 'admin') || variable_get('debugger_enabled_admin', FALSE));
  return $res;
}

/**
 * Check for Drupal root changes and fix it
 * Note: Working directory of the script can be changed on registered shutdown function under some web servers, e.g. Apache.
 */
function debugger_check_curr_path() {
  global $debugger_root_path;
  if (!$debugger_root_path) {
    $debugger_root_path = getcwd(); // Save current Drupal path, in case if we lose it
  } else {
    // Note: Working directory of the script can be changed on shutdown under some web servers, e.g. Apache.
    $debugger_root_path <> getcwd() ? chdir($debugger_root_path) : NULL; // change it back if change has been detected
  }
}

/** 
 * Implementation of register_tick_function PHP callback
 *
 * Note: register_tick_function() should not be used with threaded web server modules with PHP 5.2 or lower.
 * Note: microtime() - PHP 5.0.0  The get_as_float parameter was added.
 * Note: memory_get_peak_usage() - PHP 5.2.1  Compiling with --enable-memory-limit is no longer required for this function to exist. , PHP 5.2.0  real_usage was added.
 */ 
function debugger_tick($dump = FALSE) {
  static $tick_counter = 0;
  global $debugger_trace, $last_timer, $last_memory;
  $curr_timer = microtime(TRUE);
  $curr_memory = memory_get_usage();
  $time = (float)$curr_timer-$last_timer;
  $memory = (float)$curr_memory-$last_memory;
  if ($time > (float)D_MIN_TIMER) {
    debugger_api_register_backtrace(debug_backtrace(TRUE), $time, $memory, $tick_counter, 2);
    $last_timer = $curr_timer;
    $last_memory = $curr_memory;
  }
  $tick_counter++; 
  if ($dump) {
    return array($debugger_trace, $tick_counter);
  }
}

